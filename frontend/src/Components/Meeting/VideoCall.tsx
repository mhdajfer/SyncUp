"use client";
import React, { useEffect, useRef, useState } from "react";
import { io, Socket } from "socket.io-client";
import SimplePeer, { SignalData } from "simple-peer";
import { toast } from "sonner";
import { useSelector } from "react-redux";
import { RootState } from "@/store/store";

// Define types for the incoming call info
interface IncomingCallInfo {
  isSomeoneCalling: boolean;
  from: string;
  signalData: SignalData;
}

const END_POINT = "http://localhost:3004";

const socket: Socket = io(END_POINT);

export function VideoCall() {
  const currentUserId = useSelector(
    (state: RootState) => state.auth.user?._id
  ) as string;
  const myVideoRef = useRef<HTMLVideoElement | null>(null);
  const peerVideoRef = useRef<HTMLVideoElement | null>(null);
  const connectionRef = useRef<SimplePeer.Instance | null>(null);

  const [stream, setStream] = useState<MediaStream | null>(null);
  const [userId, setUserId] = useState<string>("");
  const [isCallAccepted, setIsCallAccepted] = useState<boolean>(false);
  const [incominCallInfo, setIncominCallInfo] = useState<IncomingCallInfo>({
    isSomeoneCalling: false,
    from: "",
    signalData: {} as SignalData,
  });

  useEffect(() => {
    navigator.mediaDevices
      .getUserMedia({ video: true, audio: true })
      .then((mediaStream) => {
        setStream(mediaStream);
        if (myVideoRef.current) {
          myVideoRef.current.srcObject = mediaStream;
        }
      })
      .catch((error) => console.error("Error accessing media devices:", error));

    socket.emit("registerUser", {
      userId: currentUserId, // Your user's unique identifier from the backend
      socketId: socket.id, // Auto-generated by Socket.IO
    });

    socket.on("incomingCall", handleIncomingCall);
    socket.on("callEnded", destroyConnection);

    return () => {
      socket.off("incomingCall", handleIncomingCall);
      socket.off("callEnded", destroyConnection);
    };
  }, [currentUserId]);

  const handleIncomingCall = ({
    from,
    signalData,
  }: {
    from: string;
    signalData: SignalData;
  }) => {
    toast.success("incoming call received");
    setIncominCallInfo({ isSomeoneCalling: true, from, signalData });
  };

  const initiateCall = () => {
    if (userId) {
      const peer = new SimplePeer({
        initiator: true,
        trickle: false,
        stream: stream || undefined,
      });

      peer.on("signal", (signalData) => {
        socket.emit("initiateCall", { userId, signalData, myId: socket?.id });
      });

      peer.on("stream", (remoteStream) => {
        if (peerVideoRef.current) {
          peerVideoRef.current.srcObject = remoteStream;
        }
      });

      socket.on("callAccepted", (signal: SignalData) => {
        setIsCallAccepted(true);
        peer.signal(signal);
      });

      connectionRef.current = peer;
    } else {
      alert("Enter user ID to initiate a call");
    }
  };

  const answerCall = () => {
    setIsCallAccepted(true);

    const peer = new SimplePeer({
      initiator: false,
      trickle: false,
      stream: stream || undefined,
    });

    peer.on("signal", (data) => {
      socket.emit("answerCall", { signal: data, to: incominCallInfo.from });
    });

    peer.on("stream", (currentStream) => {
      if (peerVideoRef.current) {
        peerVideoRef.current.srcObject = currentStream;
      }
    });

    peer.signal(incominCallInfo.signalData);

    connectionRef.current = peer;
  };

  const endCall = () => {
    socket.emit("endCall", { to: incominCallInfo.from });
    destroyConnection();
  };

  const destroyConnection = () => {
    if (connectionRef.current) {
      connectionRef.current.destroy();
    }
    window.location.reload();
  };

  return (
    <div className="flex flex-col item-center text-neutral-100">
      <h2 className="text-center">Video Calling MERN App</h2>

      <div className="flex flex-col w-300 gap-4">
        <input
          type="text"
          value={userId}
          onChange={(e) => setUserId(e.target.value)}
          placeholder="Enter User ID"
          className="input"
        />
        <button onClick={initiateCall} className="input bg-blue">
          Call user
        </button>
      </div>

      <section className="m-4">
        My ID:{" "}
        <u>
          <i>{socket?.id}</i>
        </u>
      </section>

      <div className="flex flex-row gap-4 m-4 mb-8">
        <div>
          <h3 className="text-center">My Video</h3>
          <video
            ref={myVideoRef}
            autoPlay
            playsInline
            muted
            className="video_player"
          />
        </div>

        {isCallAccepted && (
          <div>
            <h3 className="text-center">Peer Video</h3>
            <video
              ref={peerVideoRef}
              autoPlay
              playsInline
              className="video_player"
            />
          </div>
        )}
      </div>

      {isCallAccepted ? (
        <button className="input bg-red" onClick={endCall}>
          End Call
        </button>
      ) : (
        incominCallInfo?.isSomeoneCalling && (
          <div className="flex flex-col mb-8">
            <section className="m-4">
              <u>{incominCallInfo?.from}</u> is calling
            </section>
            <button onClick={answerCall} className="input bg-green">
              Answer call
            </button>
          </div>
        )
      )}
    </div>
  );
}
